{"version":3,"file":"polpware-fe-behavior.mjs","sources":["../../../../projects/polpware/fe-behavior/src/lib/state/finite-state-machine.ts","../../../../projects/polpware/fe-behavior/src/public_api.ts","../../../../projects/polpware/fe-behavior/src/polpware-fe-behavior.ts"],"sourcesContent":["/**\n * @fileOverview\n * Provides a class representing a finite state machine.\n * @author Xiaolong Tang <xxlongtang@gmail.com>\n * @license Copyright @me\n */\nimport * as dependencies from '@polpware/fe-dependencies';\nimport { replace as replaceStr } from '@polpware/fe-utilities';\n\n// A set of helper functions\nconst _ = dependencies.underscore;\nconst StateMachine = dependencies['statemachine'];\nconst indexOf = _.indexOf;\nconst without = _.without;\nconst transitionKeyFormat = '{from}2{to}';\nconst errorMessageFormat = 'Transition {name} from {from} to {to} fails.';\n\n\nfunction captialize(value: string): string {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\ninterface IUnderlyImpl {\n    state: string;\n    is(stateName: string): boolean;\n    cannot(transitionName: string): boolean;\n    fire(transitionName: string): any;\n}\n\ninterface ILifeCycleEvent {\n    transition: string;\n    from: string;\n    to: string;\n}\n\ntype MethodCallbackType = (ILifeCycleEvent) => void;\ntype ErrorHandlerType = (name: string, from: string, to: string) => void;\n\ninterface IStateSpecification {\n    onEnterCallback?: MethodCallbackType;\n    onLeaveCallback?: MethodCallbackType;\n}\n\ninterface ITransitionSpecification {\n    from: string;\n    to: string;\n    onBeforeCallback?: MethodCallbackType;\n    onAfterCallback?: MethodCallbackType;\n}\n\n/**\n * Builds a handler with necessary context information.\n * The resulting return value is a closure indeed.\n */\nfunction buildHandlerInClosure(context: { [key: string]: Array<MethodCallbackType> }, key: string) {\n    return function() {\n        const ourHandlers = context[key];\n        if (!ourHandlers) {\n            return;\n        }\n        for (let i = 0; i < ourHandlers.length; i++) {\n            const func = ourHandlers[i];\n            func.apply(null, arguments);\n        }\n    };\n}\n\n/**\n * Default error handler for the FSM.\n */\nfunction defaultErrorHandler(eventName: string, from: string, to: string): void {\n    const info = replaceStr(errorMessageFormat, {\n        name: eventName,\n        from: from,\n        to: to\n    });\n    console.log(info);\n}\n\n/**\n * Represents a finite state machine.\n * The resulting FSM is built upon a commonly used javascript\n * state machine library.\n * Such a design (of architecture) is based on the following considerations:\n * - A user-friendly interface for defining states and their behaviors\n * - A kind of model-checking capability for verifying the correctness of\n * transitions\n * - Support for asychronous and synchrous transitions\n * - Support for global exception handling\n * @class FSM\n */\nexport class FiniteStateMachine {\n\n    private _impl: IUnderlyImpl;\n    private _initState: string;\n    private _errorHandler: ErrorHandlerType;\n    private _stateConfiguration: { [key: string]: IStateSpecification };\n    private _transitionConfiguration: { [key: string]: ITransitionSpecification };\n    private _handlers: { [key: string]: Array<MethodCallbackType> };\n\n    constructor() {\n        this._impl = null;\n        this._initState = null;\n        this._errorHandler = null;\n        this._stateConfiguration = {};\n        this._transitionConfiguration = {};\n        this._handlers = {};\n    }\n\n    /**\n     * Checks if FSM is in configuration stage.\n     */\n    private ensureConfigureStage() {\n        if (this._impl) {\n            throw new Error('State machine has started.');\n        }\n    }\n\n    /**\n     * Checks if FSM is in running stage.\n     */\n    private ensureRunningStage() {\n        if (!this._impl) {\n            throw new Error('State machine has not yet started.');\n        }\n    }\n\n    /**\n     * Defines the behavior when the FSM moves into a state by a transition.\n     */\n    addState(name: string,\n        onEnterCallback?: MethodCallbackType,\n        onLeaveCallback?: MethodCallbackType) {\n        // Pre-conditions\n        this.ensureConfigureStage();\n        const stateConf = this._stateConfiguration;\n        if (stateConf[name]) {\n            throw new Error('Redefined state: ' + name);\n        }\n        stateConf[name] = {\n            onEnterCallback: onEnterCallback,\n            onLeaveCallback: onLeaveCallback\n        };\n        return this;\n    }\n\n    /**\n     * Defines the init state for the FSM.\n     */\n    setInitState(name: string) {\n        // Pre-conditions\n        this.ensureConfigureStage();\n\n        if (this._initState) {\n            throw new Error('Redefined init state: ' + this._initState);\n        }\n        this._initState = name;\n        return this;\n    }\n\n    /**\n     * Defines a new stransition.\n     */\n    addTransition(from: string,\n        to: string,\n        onAfterCallback?: MethodCallbackType,\n        onBeforeCallback?: MethodCallbackType) {\n        // Pre-condition\n        this.ensureConfigureStage();\n\n        const stateConf = this._stateConfiguration;\n        const transitionConf = this._transitionConfiguration;\n        if (!stateConf[from]) {\n            throw new Error('Undefined source state: ' + from);\n        }\n        if (!stateConf[to]) {\n            throw new Error('Undefined target state: ' + to);\n        }\n        const key = replaceStr(transitionKeyFormat, { from: from, to: to });\n        if (transitionConf[key]) {\n            throw new Error('Redefined transition: ' + from + ' -> ' + to);\n        }\n        transitionConf[key] = {\n            from: from, to: to,\n            onAfterCallback: onAfterCallback,\n            onBeforeCallback: onBeforeCallback\n        };\n        return this;\n    }\n\n    /**\n     * Starts the FSM. Note that this method must be invoked before\n     * any method which may change the state of the FSM.\n     */\n    start() {\n\n        this.ensureConfigureStage();\n        if (!this._initState) {\n            throw new Error('Init state has not been defined.');\n        }\n\n        // Definition\n        const stateConf: Object = this._stateConfiguration;\n        const transitionConf: Object = this._transitionConfiguration;\n\n        const transitions: Array<{ name: string, from: string, to: string }> = [];\n        const methods: { [key: string]: MethodCallbackType } = {};\n\n        for (const k1 in transitionConf) {\n            if (transitionConf.hasOwnProperty(k1)) {\n                const elem1 = transitionConf[k1];\n                transitions.push({\n                    name: k1,\n                    from: elem1.from,\n                    to: elem1.to\n                });\n\n                if (elem1.onAfterCallback) {\n                    methods['onAfter' + captialize(k1)] = elem1.onAfterCallback;\n                }\n                if (elem1.onBeforeCallback) {\n                    methods['onBefore' + captialize(k1)] = elem1.onAfterCallback;\n                }\n            }\n        }\n\n        for (const k2 in stateConf) {\n\n            if (stateConf.hasOwnProperty(k2)) {\n                const elem2 = stateConf[k2];\n\n                if (elem2.onEnterCallback) {\n                    methods['onEnter' + captialize(k2)] = elem2.onEnterCallback;\n                }\n                if (elem2.onLeaveCallback) {\n                    methods['onLeave' + captialize(k2)] = elem2.onLeaveCallback;\n                }\n            }\n        }\n\n        const handlers = this._handlers;\n        handlers.onEnterState = [];\n        handlers.onLeaveState = [];\n\n        methods['onEnterState'] = buildHandlerInClosure(this._handlers, 'onEnterState');\n        methods['onLeaveState'] = buildHandlerInClosure(this._handlers, 'onLeaveState');\n\n        this._impl = new StateMachine({\n            init: this._initState,\n            transitions: transitions,\n            methods: methods,\n            onInvalidTransition: this._errorHandler || defaultErrorHandler\n        });\n        return this;\n    }\n\n    /**\n     * Registers a handler for enterstate\n     */\n    onEnterState(handler: MethodCallbackType) {\n        const ourHandlers = this._handlers.onEnterState;\n        if (indexOf(ourHandlers, handler) >= 0) {\n            throw new Error('Re-registering a hander!');\n        }\n        ourHandlers.push(handler);\n        return this;\n    }\n\n    /**\n     * Registers a handler for exitstate\n     */\n    onExitState(handler: MethodCallbackType) {\n        const ourHandlers = this._handlers.onLeaveState;\n        if (indexOf(ourHandlers, handler) >= 0) {\n            throw new Error('Registering a hander!');\n        }\n        ourHandlers.push(handler);\n        return this;\n    }\n\n    /**\n     * Un-register a handler for enterstate\n     */\n    offEnterState(handler: MethodCallbackType) {\n        const ourHandlers = this._handlers.onEnterState;\n        this._handlers.onenterstate = without(ourHandlers, handler);\n        return this;\n    }\n\n    /**\n     * Un-register a handler for exitstate\n     */\n    offExitState(handler: MethodCallbackType) {\n        const ourHandlers = this._handlers.onLeaveState;\n        this._handlers.onexitstate = without(ourHandlers, handler);\n        return this;\n    }\n\n    /**\n     * Performs a transition to the given state.\n     * This method also validate the transition.\n     */\n    go(to: string) {\n        this.ensureRunningStage();\n\n        const stateConf = this._stateConfiguration;\n        if (!stateConf[to]) {\n            throw new Error('Go to undefined state: ' + to);\n        }\n        if (this._impl.is(to)) {\n            // TODO: check if the underlying implementation takes into account\n            // moving from one state to itself\n            return this;\n        }\n        const currentState = this._impl.state;\n        const transitionName = replaceStr(transitionKeyFormat, { from: currentState, to: to });\n        // Validate if this transition is allowed or not\n        if (this._impl.cannot(transitionName)) {\n            throw new Error('Transition is not allowed: ' + currentState + ' -> ' + to);\n        }\n\n        // Invoke this function\n        const func = this._impl[transitionName];\n        func.call(this._impl);\n        return self;\n    }\n\n    /**\n     * Provides the error handler for the FSM.\n     */\n    addErrorHandler(fn: ErrorHandlerType) {\n        this.ensureConfigureStage();\n\n        this._errorHandler = fn;\n\n        return this;\n    }\n\n    /**\n     * Returns the current state.\n     */\n    current() {\n        this.ensureRunningStage();\n        return this._impl.state;\n    }\n}\n","/*\n * Public API Surface of fe-behavior\n */\n\nexport * from './lib/state/finite-state-machine';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["replaceStr"],"mappings":"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"}